
First, 
change read parameter which is in the main folder to include rotational paramterers in the 

For IO you need to change , 
diagnostics, IO, netCDF IO

Grep All files to see where Rotation is mentioned, make changes there. 

think about k curled with forcing is it non-zero. 
-------------------------------------------------------------------------

Log of changes in the Code along side git records:

-------------------------------------------------------------------------



Commit 1: first commit to the repo, added two rotation related parameters to the parameter file. Made a differences.txt to see differences in the parameter file. 

Files Modified: 
main/parameter_file



-------------------------------------------------------------------------



Commit 2: Added some ref logs to find the parameter structure. Also added rotational parameters into the read_parameter.f90 and parameter_module.f90 files. All CPU's should be able to receive new parameters through the MPI broadcast.

Files Modified: 
main/src/main/read_parameter.f90
main/src/parameter_module.f90

Notes for Commit 2: 
 -  Used grep to find all references to the word "parameter" in the source code. This output was stored in the file "parameterUseLog.txt" inside PADDIM_v2_beta/main/src/ 
 -  Also grepped the word "rotation" in the PADDI-rotation src code. This output was stored in the rotationRefLog.txt file in the PADDI-rotation/main/src
 -  In main/read_parameter.f90 I added the following lines to the name list group "input_values"
    /input_values/ Rotational_param
    /input_values/ Angle_rot_axis_gravity
Then added the declaration for those variables in the same fortran file above and added a broadcast and receive function for the same two parameters below. Once values are read from the parameter file. These two parameters are stored specifically in the R and Theta values. 
    R = Rotational_param
    Theta = Angle_rot_axis_gravity. 
NOTE: R and Theta MUST BE added to whether the rest of these coeeficieints are defined. Others are called B_therm, B_comp, C_Lorentz, D_visc, etc. R and Theta must be added for the memory to not throw and error during compilation.  RESOLVED: R and Theta added to the parameter_module where the rest of the coefficients are declared in memory. Again note, R is not a radius, but the rotational parameter, I think similar to Omega or F. 
 - R and Theta added to parameter_module.f90 variable declaration. 

Notes on File Structure:

parameter_module.f90:
 -  Found the root of the parameter work comes from the parameter module and is imported into other modules and routines from there. 
 -  The parameter_module.f90 folder uses the defprecision_module and reads the data from the parameter file using
 -  Variable kinds are generated from the defprecision_module as they are used in parameter_module.f90 without definition
 - Variable values are not actually written here. Only memory is allocated for these variables. I need to find where these are stored. 
 - It appears that the main/read_parameter.f90 file is the fortran script which apprently reads the parameters from the parameter file and sotres them (I assume in the memory brought into the script from the parameter file

main/read_parameter.f90:
 - A subroutine which seems to use NAMELIST to read parameters from the parameter file and then broadcasts them using MPI to all of the other cores. 
 - Namelist is a fortran 77 function which assigns names or variables to a group name. This groupname can be passed only into the following fortran commands. NAMELIST, READ, or WRITE. 
 - The namelist contains all of the names of our variables in order. 
 - All of the parameters are read on the master cpu and then the rest of the cpus receive the data from the MPI_Bcast command which is set to broadcast from CPU id 0. 
 - Some of the input paramters are printed back out on the master cpu at the end of the file but most of the PDE parameters are not read back out,only some of them.



--------------------------------------------------------------------------



Commit 3: Did more investigation into IO structure. Added some variable definition and output in IO module. Started working on the pnetCDF_IO module as well but have not finished.

Files Modified: 
main/src/IO/open_files.f90
main/src/pnetCDF_IO/pn_open_dump.f90

Notes for Commit 3: 
 - Added R and Theta to IO/open_files.f90 and to the vectors finfo, cinfo defined within open_files.f90. Adjusted length of finfo and cinfo files accordinly. 
 - Added R and Theta to pnetCDF_IO/pn_open_dump.f90 variable declarations. pn_check subroutine calls for both parameters has not yet been integrated. 

Notes on File Structure: 

pnetNDF_IO Directory: 
 - parameter reference only in the following files:
    pn_open_dump.f90 - 4 references / variable
    pn_open_simdat_file.f90 - 3 ref / var
    pn_read_size_and_pa_from_dump.f90 - 5 ref / var
    pn_read_size_and_pa_from_dump_hydro.f90 - 5 ref / var
    pn_read_size_and_pa_from_simdat.f90 - 5 ref / var

pnetCDF_IO/pn_open_dump.f90: 
 - parameters are read in from parameter_module and then are referenced in the pn_check subroutine. There is an individual subroutine call for each parameter adn it seems that each parameter has an associated *_varid_dump. For example D_therm has D_therm_varid_dump inside the pn_check subroutine call.
 - there is a layering. Inside the pn_checks for each parameter, one is for the nfmpi_def_var function and the other is for the nfmpi_put_att_text function. Each call is related in some fashion to ncid_dump, whether this is analogous to cpuid or not I'm not sure. 
 - Need to determine what pn_check, nfmpi_def_var, and nfmpi_put_att_text do. pn_check likely comes from "pnetcdf.inc" and the nfmpi functions likely come from "mpi.h" or MPI module. 
 - Later, around line 200, another pn_check routine is called for each parameter. This time with PM_NFMPI_PUT_VAR_FLOAT as the inner function. 


IO Directory: used to tidy up the IO_module.f90 
 - for parameter IO the only important files are below: 
    open_files.f90

IO/open_files.f90
 - parameters are read from parameter_module and then written out. 
 - Two arrays declared: finfo, cinfo containing parameter data. 
 - Calls netCDF subroutines. I don't understand their purpose yet or if it is related to the parameters at all. 

 - read_parameter is called stored in main_module.f90 and so any file that uses this module will include it. Prog.f90 includes main_module and calls the read_parameter file.
 - Something interesting in the prog.f90 file is the way it creates variables for u, B, Temp, and Chem. They are declared by the following line of code.  
    TYPE(velocity) :: u
    TYPE(field)    :: B ! PH
    TYPE(buoyancy) :: Temp,Chem
   Brief investigation shows that this is a derived datatype and an initialization process must be undergone for the variable to function properly. This is most likely done in the "init" subroutine later called within prog.f90. "init" is found in main_module.f90 but might not be defined there. This is of concern for later as stochastic forcing shouldn't require a new type of field / variable to be initialized in prog.f90
 - List of files where Theta is directly listed in PADDI-rot is as follows: 
    IO/open_files
    main/ineffi_crhs_velocity.f90
    main/crhs_velocity.f90
 - Look into why there is a Sin_theta and Cos_theta variable stored in PADDI-rot



--------------------------------------------------------------------------



Commit 4: Modified more of the pnetCDF_IO files. pnetCDF_IO/pn_open_dump.f90, pn_open_simdat_file.f90; pnetCDF_IO_module. Understanding more of the pnetcdf structure as it differs from the IO files.

Files Modified: 
main/src/pnetCDF_IO_module.f90
main/src/pnetCDF_IO/pn_open_dump.f90
main/src/pnetCDF_IO/pn_open_simdat_file.f90

Notes for Commit 4: 
 - Added R and Theta to pnetCDF_IO_module.f90 in variable declaration. This will make simdat and dump varids globally accessible to the rest of the pnetCDF_IO files. 
 - Added R and Theta pn_check subroutine calls to pnetCDF_IO/pn_open_dump.f90 (3 for each parameter)
 - Something to take note of. On line 206 in pn_open_dump.f90, there is a reference to the pervious last elements of cinfo and finfo arrays. They used to be of length 9 before adding R and Theta, they are now 11 elements long each. I don't know what line 206 is doing so I'm not changin it yet. This doesn't occur at the corresponding line in pn_open_simdat_file.f90. 
 - Added R adn Theta pn_check to the pnetCDF_IO/pn_open_simdat_file.f90. 3 calls to pn_check for each variable. One for definition, one for attribute text, and then one for the value. 


Notes on File Structure:

pnetCDF_IO:

pnetCDF_IO/pn_check.f90:
 - This seems to take in a status from the functions placed in the subroutine call and then if the status is something other than nf_noerr ( I assume a variable that stores a success boolean value )  then it prints the status and uses the "STOP" command.
 - Uses pnetcdf.inc module and defprecision_module

pnetCDF_IO/pn_open_dump.f90: 
 - The pn_check calls are becoming less confusing. Inside each call, there is a status returned by nfmpi_*. Essentially in pnetcdf, you have to instantialize the parameters in a weird way. This is something intrinsic to pnetcdf. I believe each function call, is actually allocating memory and perhaps even performing some other function, the onyl thing the user sees is the status returned afterwards. Essentialy, we are defining variables and such within a different programming structure and then seeing if they were processed correctly with pn_check. 
 - Each parameter has a *_varid_dump pair. This variable isn't defined in pn_open_dump.f90. It has to be defined somewhere else in the code, unless fortran can somehow run a function and declare a new datatype in there.
 - Using grep to find where these  *_varid_dump are defined is not helpful. No defintion is found. Looking at the module linking, it can only be in defprecision_module, mpi, or pnetcdf. Or defined by some other file inside the pnetCDF_IO directory, but this doesnt seem to be the case. RESOLVED: They are defined in pnetCDF_IO_module.f90 which lies outside of that directory. There is an implicity superclass structure on each module with a corresponding directory. 

pnetCDF_IO/pn_open_simdat_file.f90:
 - This file is very similar to the pn_open_dump.f90. This file declares all of the simdat versions of the code. I believe the dump files and versions are all to dump restart data into. (3 more references for each parameter in this file. 

pnetCDF_IO_module.f90:
 - global data declaration for pnet cdf files. All types of parameters are stored here and many different things are defined in this file. Each parameter has a simdat and dump id and is only referenced twice in this file. 
 - This is only for memory allocation and superclass / subclass orgnaization. It seems varid's are given in the read pnetCDF_IO files. 
 - 



--------------------------------------------------------------------------



COMMIT 5: Finished pnetCDF module. Getting ready to finish Main Module. Neet to introduce rotation force in numerical algorithm.  

Files Modified: 
main/src/main/read_parameter.f90
main/src/pnetCDF_IO/pn_open_dump.f90
main/src/pnetCDF_IO/pn_read_size_and_pa_from_dump.f90
main/src/pnetCDF_IO/pn_read_size_and_pa_from_hydro.f90
main/src/pnetCDF_IO/pn_read_size_and_pa_from_simdat.f90

Notes on Commit 5: 
 - added theta = theta * pi in main/read_parameter.f90
 - Fixed pn_check call for Theta which as an incorrect reference to the wrong var dump id. 
 - Added R and Theta to the pnetCDF_IO/pn_read_size_and_pa_from_dump.f90
 - Added R and Theta to the pnetCDF_IO/pn_read_size_and_pa_from_dump_hydro.f90
 - Added R and Theta to pnetCDF_IO/pn_read_size_and_pa_from_simdat.f90.

Notes on File Structure: 
 - Other files that use the parameter module are the "State" Folder, "Testing" folder, "Main" Folder, "Diagnostics" Folder, "Diff_op" Folder

Main:
 - This module has several files which use the physics parameters. 
    read_parameter.f90
    AB_BDF3/timestep_AB_BDF3.f90, 2 ref / parameter
    AB_BDF3/CFL_AB_BDF3.f90, 2 ref / parameter
    RK2_CN/timestep_RK2_CN.f90 3 ref / parameter
 - Next step is to modify these files to include the rotation. This will probably come in the form of coriolis or centrifugal forces. 

Diff_OP:
 - This module uses the parameter module but doesn't access any of the physics parameters such as R, Theta, D_therm, etc.

Diagnostics: 
 - This module uses the parameter module but also doesn't seem to access any of the physics parameters.  

Testing: 
 - This module uses the parameter module but also doesn't seem to access any of the physics parameters. 

State: 
 - This module seems to use the parameter module in order to define u, T, B, and C better but it doesn't use any of the physics parameters either. 

pnetCDF_IO:
 - Files to modify still: 
    pn_read_size_and_pa_from_dump.f90 - 5 ref / var
    pn_read_size_and_pa_from_dump_hydro.f90 - 5 ref / var
    pn_read_size_and_pa_from_simdat.f90 - 5 ref / va

pnetCDF_IO/pn_read_size_and_pa_from_*.f90:
 - This file seems to read parameter info from the dump files and then check them against the current run paramters to make sure they match. This is one of the restart routines. This is identical for all of the read size and pa files. 



--------------------------------------------------------------------------



COMMIT 6: R and Theta should be fully implemented now. Going to attempt compilation on scratch directory.

Files Modified: 
main/src/main/crhs_velocity.f90

NOTE: Code compiled and ran, however the data created in OUT1 doesn't seem to creating the simulation we want it to. 

Notes for Commit 6: 
 - Added R, Theta to MAIN/crhs_velocity.f90
 - Added coriolis force to crhs_velocity.f90 using the force present in PADDI-rotation/crhs_veloity.f90

Notes on File Structure:
 - Looking at the PADDI-rot source code, I can see two files where they have R and Theta integrated as they relate to velocity in the Main module. Here is the list of references: 
    Main/read_parameter.f90
    MAIN/crhs_velocity.f90
    IO/open_files.f90
    parameter_module.f90

AB_BDF3/tmstp_velocity_AB_BDF3.f90
 - this file performs the Adams Bash  



-------------------------------------------------------------------------



COMMIT 7: 

Files Modified: 
(PADDI-rotation)
main/src/pnetCDF_IO/pn_open_dump.f90
main/src/pnetCDF_IO_module.f90
main/src/pnetCDF_IO/pn_open_simdat_file.f90
main/src/pnetCDF_IO/pn_read_size_and_pa_from_dump.f90
main/src/pnetCDF_IO/pn_read_size_and_pa_from_simdat.f90
main/src/state/init_Chem_phys.f90
main/src/state/init_Temp_phys.f90
main/src/state/init_u_phys.f90

(PADDIM_v3)
main/src/state/init_Chem_phys.f90
main/src/state/init_Temp_phys.f90
main/src/state/init_u_phys.f90\
main/sbatch.pbs
main/parameter_file

Notes for Commit 7:
 - Making all of the same changes in the pnetCDF files in PADDI-rotation as I made in PADDIM_v3. The goal is to ultimately use PADDI-rotation as a benchmark / comparison for the effectiveness of PADDI-rotation. 
 - Made changes in State Module for both versions of PADDI to give them the same initial condition. 
 - Going to change the parameter_file of PADDI-rotation next. 

Notes on File Structure:
 - Initial Conditions are read from the State module. 



-------------------------------------------------------------------------



COMMIT 8: ADDED FORCING FILES TO PV3

FILES MODIFIED:

NOTES FOR COMMIT 8:

NOTES ON FILE STRUCTURE:

OUTSTANDING TASKS: 

-------------------------------------------------------------------------



COMMIT 9: 

Files Modified:
 - forcing_module.f90
 - forcing/partial.f90 renamed and modified to gaussian.f90
 - forcing/interp.f90 
 - forcing/cgp2dcoeff.f90
 - forcing/gaussian
 - forcing/read_forcing.f90


Notes for Commit 9:
 - Need to chance nx and ny in gaussian mod file because this cnoflicts with other names in PADDI. Will fix in commit 10
 - added forcing.dat file where GP Will be stored in 
 - changed read_forcing.f90 to read the forcing.dat file and store it in an array and compute a slope matrix for linear interpolation
 - changed interp.f90 be a function file and to return an linear interpolation for all modes needed for GP between two timesteps
 - introduced a cgp2dcoeff to calculate the coefficients needed to make the forcing perpendicular to each wavevector.
 - added variable definitions that will be accessible to all of the forcing files. This will speed up interpolation time and help keep track of values between forcing files. 
 - still need to figure out how to ultimately connect it in forcing.f90 and how to determine how ot isolate wavenumbers per processor.

Notes on File Structure:
 - Attempting to fix the gaussian process generation to be relevant to the parameters of the code. Forcing needs to see how many timesteps the stochastic forcing needs to go out to. NOTE: the code seems to tkae the number of iterations and divide by 0.0005. So we should be able to take the number of iterations from parameter module, divide by 0.0005 and then add 1000 for good measure. 
 - The code might be set to read forcing on start for every run and only recompute the forcing files if the parameters of the forcing do not match the parameters given from the parameter file. 
 - Forcing will be stored in a text file called force.dat. At the top of the file, the relevant parameter readings will be located there. 


-------------------------------------------------------------------------


COMMIT 10: A lot more progress on forcing module. General structure of forcing is laid out. Details need to be ironed out and gaussian generation still needs to be perfected according to the needs of the rest of the code.

Files Modified:
 - forcing/gaussian/gaussian_mod.f90
 - forcing/interp.f90
 - forcing_module.f90
 - forcing/read_module.f90
 - forcing/cgp2dcoeff.f90           
 - forcing/forcing.f90              

Notes for Commit 10:
 - fixed the variable name conflicts within the Gaussian folder
 - modified forcing/read_forcing.f90 to read the data into two arrays the x and y data (t and f). This will help with identifying which column of y/f values we are looking for. This will also require a wavenumber index matrix that maps wavenumbers to GP columns made in read_forcing.f90 
 - cgp2dcoeff.f90 is structured so that the coefficients for the forcing can be computed according to the wavenumber. 
 - read_forcing.f90 should be placed in parameter or IO folder to get the work there done early on one core processor. Or maybe just add a line in open_files.f90 that says CALL read_forcing(). Then the forcing module would need to be compiled before the IO module. 

Notes on File Structure:
 - From parameter module, see can see the kx, ky, and kz vectors all of which are "mapping tables" which turn array indices into wavenumbers. This might be what I need to coordinate GP regression. These variables are allocated and initialized in the parameter module in files realted to fft_storago_scheme. 
 - From parameter/init_fft_storage_scheme, kx, ky, and kz, are definied by kx(i) = i * alpha, where alpha is the 1 * pi / length of domain on that axis. So kx(i) = i * alpha, ky(i) = i * beta, kz(i) = i * gamma, where i = 0, 1, ..., Lmax/Mmax/Nmax. 
- I believe the mysx_phys and other related variables are defined according to kx, ky, and kz. Going to investigate that soon. mysx_phys and spec are defined according to the mpi_transf_module and the transpose_pencil_module

Pascale's Notes: 
-sometimes memory allocated and seartching/distributing memory is more costly than a compution itself. Consider doing the computation for Gp coefficients over and over again for each timestep
- in forcing.f90 change it so that the Gp forcing affects the force_spec array rather than the force_phys array
- consider using the interpolation routine that pascale sent me rather than my own. 
- BE MORE SPECFIFIC / EXACT with variable names. Have them describe exactly what they do for future students. 
-  can look at crhs_velocity.f90 to see how to look through spectral space easily / "the way its been done before"


------------------------------------------------------------------------e



COMMIT 11: 

FILES MODIFIED:
 - parameter_module.f90:
 - prog.f90: 
 - forcing/gaussian/gaussian_mod.f90:
 - forcing/gaussian/gaussian.f90:
 - forcing/read_stochastic_forcing:
 - forcing/close_stochastic_forcing:
 - forcing/gpinterp: 
 - forcing/forcing.f90:
 - forcing_module.f90:
 - forcing/forcing_parameters:
 - Makefile: 


NOTES FOR COMMIT 11:
 - read_stochastic_forcing: changed wavenumber mapping and gp generation to be processor specific. 
 - gaussian_mod.f90: Now ther is a do loop for numCols in gaussian process generation, deallocates are added to the code
 - gaussian.f90: now creates any number of columns that we want
 - gpinterp: changed to only use the arrays per processor
 - forcing_module.f90: added module linking and changed subroutine names
 - forcing_parameters: added 5 gp parameters for reading.
 - close_stochastic_forcing.f90: deallocates forcing arrays. 
 - parameter_module.f90: added zerowavenumber for kz indexing, kmax_forcing for max forcing wavbenumber.
 - parameter_file: max_forced_horiz_wavenumber for kmax_forcing in read_parameter
 - prog.f90: added subroutine calls for read_stochastic_forcing and close_stochastic_forcing, linked forcing_module
 - Makefile: 


NOTES ON FILE STRUCTURE:
 - forcing_module.f90 needs to be compiled before main module. open_files.f90 needs to call read_forcing when the code starts.
 - we need the forcingInfo format to follow that of the parameter file format. This will allow us to use the same input format as in read_parameter.f90 in the main module. 
 - need to use message_passing_module to get cpuid (myid), and other MPI variables
 - How does read_parameters.f90 know which file to open???
 - forcing_module needs the following modules to run properly:
    defprecision_module
    defs_2D_3D_module
    parameter_module
    mpi_transf_module
    diff_op_module
    MPI
    message_passing_module


-------------------------------------------------------------------------


COMMIT 12: Massive commit. Code will not compile yet. In the middle of adjusting the pnetcdf files. Big changes in t with the Makefile and scheme of forcing calling.
 
 
Files Modified:
 - Makefile
 - ../sbatch.pbs
 - forcing/read_stochastic_forcing
 - forcing_module.f90
 - prog.f90
 - gaussian.f90
 - parameter_module.f90
 - parameter/init_fft_storage_scheme.f90
 - pnet_CDF_IO/pn_read_size_and_pa_from_dump.f90
 - pnet_CDF_IO_module.f90
 - forcing_parameters
 - parameter_file
 - main/read_parameter.f90


NOTES FOR COMMIT 12:
 - read_stochastic_forcing.f90: changed namelist and reading defintion. Fixed error in wavenummap loop indices. Reinitialized hkx, hky. Changed code to look at total horizontal wavenumber
 - forcing_module.f90: changed incorrect defintions of variables
 - Makefile: added -mkl flags to the F90FLAGS, LDFLAGS, and LIB flags. added STOCHASTIC_FORCING compiler flag
 - sbatch.pbs: added mkl module to the module load list
 - prog.f90: moved read_stochastic_forcing call below the init call and into compiler flag statement. Added error_code var that will end code if it has a non-zero value
 - gaussian.f90: changed file path for writing
 - parameter_file: removed max_wavbenumber. 
 - forcing_parameters: added max_wavenumber
 - pnetCDF_IO_module.f90: added nprocs varid variables.
 - pn_read_size_and_pa_from_dump: added pn_checks for nprocs
 - read_parameter: added clause for error in pn_read_from to report to prog.f90 
 - pn_read_size_and_pa_from_dump_hydro: added pn_checks for nprocs
 - pn_read_size_and_pa_from_simdat : added pn_checks for nprocs


NOTES ON FILE STRUCTURE:
 - nprocs1 and nprocs2 are stored in the message passing module
 - added STOCHASTIC_FORCING tag to relevant places so that the code doesn't have to be dramatically changed every time we want to make sure we haven't broken the code. 


OUTSTANDING TASKS MOVED TO COMMIT 13:
 - make sure read_stochastic_forcing is reading forcing_parameter properly. Combine parameter files with the use of namelist syntax
 - add format statement to the read and wrtie files 
 - Find out how to read and store integers in pnetcdf stuff use dim thing in top of pn files. ADD THIS TO PN READ FROM FILES, nfmpi_put_var_int
 - add variable definitions to pnetcdf open and write files. 


-------------------------------------------------------------------------



COMMIT 13: Code Compiles Properly. Commit 14 will debug


FILES MODIFIED:
 - pnetCDF_IO/pn_open_dump.f90
 - pnetCDF_IO/pn_read_size_and_pa_from_dump.f90
 - pnetCDF_IO/pn_read_size_and_pa_from_dump_hydro.f90
 - pnetCDF_IO/pn_read_size_and_pa_from_simdat.f90
 - pnetCDF_IO/open_simdat.f90
 - forcing/read_stochastic_forcing.f90
 - Makefile
 - forcing_module.f90
 - forcing/read_stochastic_forcing.f90
 - forcing/gaussian.f90


NOTES FOR COMMIT 13:
 - pn_open_dump.f90: added nprocs to dump start
 - pn_read_size_and_pa_from_dump: added nfmpi_get int call
 - pn_read_size_and_pa_from_dump_hydro: added nfmpi_get_int call
 - pn_read_size_and_pa_from_simdat: added nfmpi_get_int_call
 - pn_open_simdat.f90: added nprocs to simdat start
 - read_stochastic_forcing.f90: deleted comments, cleaning up code
 - Makefile: changed path to gaussian.f90
 - forcing_module.f90: changed path to gaussian.f90, added formatString variable.
 - read_stochastic_forcing: changed read to be formatted, made code more readable and changed print statements
 - gaussian: changed write to be formatted and elimated write bug


NOTES ON FILE STRUCTURE:
 - a grep search shows that NF_INT isn't explicitly defined anywhere in the paddi code. It must be included in one of the pnet or mpi libraries. 
 - there is no way to have fortran skip lines in read. You hace to read the line and not store it or read it into a dummy variable. Only gnuplot has the header feature.  

OUTSTANDING TASKS: MOVED TO COMMIT 14
 - add the rest of the gp parameters to the read_forcing_parameters list. 
 - make sure read_stochastic_forcing is reading forcing_parameter properly. Combine parameter files with the use of namelist syntax

-------------------------------------------------------------------------



COMMIT 14: 


FILES MODIFIED:
 - forcing/gaussian.f90
 - forcing/read_stochastic_forcing.f90
 - main/crhs_velocity.f90


NOTES FOR COMMIT 14: 
 - When not using the -DSTOCHASTIC_FORCING flag code runs and compiles normally. 
 - gaussian.f90: changed format string, added num trash lines
 - crhs_velocity.f90: added print statements to debug


NOTES ON FILE STRUCTURE:


OUTSTANDING TASKS: 
 - add the rest of the gp parameters to the read_forcing_parameters list. 
 - make sure read_stochastic_forcing is reading forcing_parameter properly. Combine parameter files with the use of namelist syntax
 - debug
 - there is a memory bug occuring somewhere after or during the first forcing loop. It is on CPU 0. It doesn't get through crhs_velocity. Somewhere before the last print statement there is a memory bug. 

-------------------------------------------------------------------------



COMMIT 15:


FILES MODIFIED:


NOTES FOR COMMIT 15:


NOTES ON FILE STRUCTURE:


OUTSTANDING TASKS: 



-------------------------------------------------------------------------







